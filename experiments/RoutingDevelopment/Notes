I want to emulate a packet network as a class QueueingNetwork.

# Topology
The topology of this packet network is given as a graph G = (V,E)
# Traffic Classes
There are K classes of traffic in this network. Each class of traffic as a source node $v_s^{(c)}$, destination node $v_d^{(c)}$,
and arrival rate $\lambda^{(c)}$
# Edges
Each edge in the network has a queue which buffers packets.  The queue is first-in-first out.
Each edge also has a capacity $C_e$ which is the maximum number of packets that it can serve at each time-step.
$C_e$ is a Poisson random variable with mean $\mu_e$.
# Packets
Each packet has the following attributes:
    1. Remaining path: the remaining path the packet as to take to reach its destination. If the packet is current in queue
       $q_{e_a}$, then the remaining path will be [e_a, e_{b} ....]
    2. Time-in-network: the time the packet has spent in the network. This is incremented by 1 each time-step
    3. Priority: Starts as 0 when the packet enters the network, and decreases by 1 at each hop. Used for Extended Nearest to Origin prioritization in scheduling.
    4. Class: The class of traffic that the packet belongs to.
# Arrivals
At the end of time-step t, the network receives a number of packets for each class of traffic.  The number of packets for each class of traffic is a Poisson random variable with mean $\lambda^{(c)}$.
These are not immediately added to an edge queue, as they must be assigned a path.
# Routing
The routing algorithm assigns a path to each class of traffic. It returns a list of paths, where each path is a list of edges.

# Creating a network instance
The QueueingNetwork class will take as input:
1. Graph G -> Specified as an adjacency list
2. Class Traffic information -> A list of dictionaries, where each dictionary has the source, destination, and arrival rate for each class of traffic


# Pseudocode for the step function of the queueing network simulator



class Node:

    def __init__(self, index: int, edges: dict):



def step(self, action):
    # Action is a list of lists, where each list represents a path from source to destination

    # The Network Object will have an internal arrivals state, which has the number of arrivals for each class of traffic

    # Step 1: Apply the action
    for class, path in enumerate(action):
        self.arrival_nodes[class].